Problem Description:
Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. 
Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 < numbers.length.
Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.
The tests are generated such that there is exactly one solution. You may not use the same element twice.
Your solution must use only constant extra space.

Example 1:

Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].


Code:
class Solution:
    def twoSum(self, number: List[int], target: int) -> List[int]:
        n=len(number)
        l=0
        h=n-1
        ans=[]
        while l<h:
            if number[l]+number[h]==target:
                ans.append(l+1)
                ans.append(h+1)
            if number[l]+number[h]>target:
                h-=1        #given that array is sorted so need to do this
            else:
                l+=1
        
        ans.sort()
        return ans

Problem Source: https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/solutions/4070609/two-sum-problem-solution-two-pointers-approach/
