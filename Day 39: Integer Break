Problem Desciption:
Given an integer n, break it into the sum of k positive integers, where k >= 2, and maximize the product of those integers.
Return the maximum product you can get.

Example 1:

Input: n = 2
Output: 1
Explanation: 2 = 1 + 1, 1 Ã— 1 = 1.



Code:
class Solution:
    def integerBreak(self, n: int) -> int:
        dp = [0] * (n + 1)

    # Base cases
        dp[1] = 0
        dp[2] = 1

    # Calculate the maximum product for each number i
        for i in range(3, n + 1):
        # Initialize the maximum product for i as 0
            max_prod = 0

        # Calculate maximum product for each j from 1 to i - 1
            for j in range(1, i):
            # Calculate the product of j and the maximum sum of (i - j)
                prod = j * max(dp[i - j], i - j)
                max_prod = max(max_prod, prod)

        # Update the maximum product for i
            dp[i] = max_prod

        return dp[n]



Source: https://leetcode.com/problems/integer-break/description/?envType=daily-question&envId=2023-10-06
