Code:
class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        ip=list(digits)
        print(ip)
        d={2:list("abc"),3:list("def"),4:list("ghi"),5:list("jkl"),6:list("mno"),7:list("pqrs"),8:list("tuv"),9:list("wxyz")}
        ans=['']
        if not digits:
            return []
        if len(digits)==1:
            k=d[int(digits)]
            print(k)
            ans=list(k)
            print(ans)
            return ans
        if len(digits)>1:
            for i in ip:
                s=[]
                for j in d[int(i)]:
                    for k in ans:
                        s+=[k+j]
                ans=s
        return ans


Problem Description:
Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.
Example 1:
Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]

Example 2:
Input: digits = ""
Output: []

Problem Source: 
